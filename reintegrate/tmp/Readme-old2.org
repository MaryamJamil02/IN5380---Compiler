* First steps (old)



Take this directory as ``starting point'', i.e., get yourself a ``copy''
from this directory, for instance by downloading  the zip-file, using the
corresponding green button of the github web-page)

** Rename it to fit to your own project:

When getting a copy after unzipping, the directory will be called
~compila-master~ (if you clone it, the name is ~compila~). Rename the
directory to fit with your group number, so if your group is ~01~, your
(resp. your groups) directory is called ~compila01~.  Please: don't call it 
something else, neither ~compila1~, nor ~Compila01~ not ~compila-01~
etc. It makes uniform treatment of all groups and automatic checks (perhaps
via scripts) a tiny bit more easy.


If you instead of downloading the zip, get yourself a clone: Make /sure/
that the original repos [[https://github.uio.no/msteffen/compila]] is no longer
connected to your clone, as you should just use it as a starting point for
/your/ project, and not to work in the common code base.

  

** Some check to see if everything on your system is in place

You should make sure that java runs (and the classpath is not messed up
somehow etc).  Perhaps check if ~ant~ is running.

*** Check the simple evaluator

Inside the compila-directory, do


#+begin_src 
   cd material/simpleexpression
   ant 
#+end_src
watch the output, and try out the shown targets. There is 1 target for
cleaning up, 2 different programs that can be built and run, so altogether
5 targets you can test.

*** Check the dummy code

Do the same for the dummy- and skeleton-classes provided as starting point
for the compila 22 compiler. Inside the top-level compila directory, which
contains a [[./build.xml]]-file, do

#+begin_src 
 ant   
 ant build
 ant run
#+end_src


There might be warnings about ``non-reproducible builds'', but you can
ignore that.





** Make it availabe via git

Typically that means: create yourself a repos at ~github.uio.no~ called
~compila<xxx>~. 



If the project is non-public, add me (~msteffen~) as collaborator. /Inform
me via email about the url of the repos./ It's a good idea /not/ to wait
for that until the deadline for the oblig, but at that time I need access
to your project. Make sure that the project is usable ``out-of-the-box'',
like: if a third person (like me) does the following steps:

#+begin_src 
  git clone <url to your project>
  cd compila<xxx>  
  ant build        // or whatever
#+end_src
it does the intended thing. There must also be a simple top-level
Readme-file that instruct a user what to do. If wished you can edit and
clean up the ~Readme.org~ file here to fit the needs of your project, or
replace it but another Readme file (but no need to have 2 readme-files
around).

