#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:nil tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Oblig 2 ``patch'' 
#+DATE: <2020-04-02 Thu>
#+AUTHOR: Martin Steffen
#+EMAIL: msteffen@ifi.uio.no
#+LANGUAGE: en
#+SELECT_TAGS: export slides B_frame B_againframe
#+EXCLUDE_TAGS: private noexport B_note todo handout ARCHIVE script
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.6)


* Intro

The repos for oblig 1 has been ``copied'' as a starting point for the
groups. It contained already at that time /more/ than was needed for
oblig 1.

However, some things that was provided at that point needs replacement. For
instance, the ~build.xml~ file provided at that time was tailored to oblig
1, not for oblig 1, to avoid confusion (even though it was mean primarily
as inspriration). Now, it needs to be extended and for that a new version
of a ~build.xml~ provided.

Other material was (at that time) not yet ready. That refers to the test
files needed for oblig 2. This time, there are /more/ official, mandatory
test files. For oblig 1, it was basically only the ~complexaddition.cmp~
file that one had to use, the other testfile were there and could be used,
for smaller tests and debugging.


Anyway, this newer and updated information is called *patch* here. Since
the groups' reposes are no longer coupled to the course's repos
[[https:github.uio.no:msteffen/compila]], one cannot (easily) distribute the
new information in that everyone updates the local clone and merge the
information. Of course one can update the course repos, getting the new
information, but afterwards one has to copy it over to the groups own



* What to do?



Note: as I don't know to which extent the original structure has been
changed in a given group, this material is *NOT* intended to work
``out-of-the-box'' for everyone (or even the majority). It's meant as
/guideline/ of what to to. When unclear, ask.

The oblig itself is specified as the second part of the Compila 20 document
(type checking and code generation). Therefore, also the documentation how
do make use of the given library needs to be consulted. The documentation
is (in your original project) under ~/doc/ (when seen from the root of the
repos):




#+begin_example
 ./doc/bytecodeinterpreter
 ./doc/languagespec
  .doc/obligs
#+end_example

If you did not delete that part from your repos, it should still be
there. But there is new info concerning oblig 2 in the patch (handout +
slides).  Otherwise it's  browsable at

    https://github.uio.no/msteffen/compila


So much for the background information. As far as code is concerned given
*in this patch*


  - ~./src~ : There is a ``new'' version of the ~Compiler.java~ file.
            It is basically an extension the the older file, that was provided
	    as starting point. Basically, you should adapt your ~Compiler.java~ file
	    accordingly (most people made adaptations from the starting version, so
	    that's one of the points where you cannot expect that the newly proposed
	    inspirational version will just work for you directly.



          Move the directories to a place that suits your compiler (perhaps as
	   subdirectories of src, but some people changed also that)



   - ~./build.xml~ : analogous remarks also here. You will perhaps have worked with
                   ~ant~ (as suggested) and may have taken the previous
                  ~build.xml~ as starting point (and probably adapted things here and there). 
                  Again: this one is a suggestion on how to extend your build-file to support the new
                  needs and target. 

		    In particular, code generation and the tests etc. MUST
                    BE AUTOMATED and executable (for me) in an EASY manner.



    - test files: For the test-compila-files: I include them here in the
      patch, there are files for testing the 

           1) type checker and the static analysis phase
	   2) code generator ([[./src/tests/fullprograms/runme.cmp]] was already distributed
	       last time)
      For the first ones: they are separated into those which should work
      and those where the type checker should report an error.



      


