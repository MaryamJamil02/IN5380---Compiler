#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:nil tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Compila 18 (language and compiler skeleton)
#+DATE: <2018-02-25 So>
#+AUTHOR: Martin Steffen
#+EMAIL: msteffen@ifi.uio.no
#+LANGUAGE: en
#+SELECT_TAGS: export slides B_frame B_againframe
#+EXCLUDE_TAGS: private noexport B_note todo handout ARCHIVE script
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.6)

 


* Intro

The repository host material for the /Compila 18/ compiler, which is the
content of oblig 1 and 2 for the course ``compiler construction''
([[http://www.uio.no/studier/emner/matnat/ifi/INF5110/][INF5110]]/INF9110). The material focuses on the code and the description and
documentation of the compiler. /Not/ contained here is the compiler course
itself (the slides, the exercises etc.  Those are kept in the respository
of the course itself, and the generated slides are kept in the Vortex
system on the course's web-page.


* Overview over the directory's structure

  

- [[./src]]: sources (of all kinds, for the documention mostly)
- [[./doc]]: generated documentation 
  - language specification
  - byte code interpreter
  - instructions about the obligs
      

* Starting points for /your/ oblig (resp. your goup's)




In general, the starting points are meant a the name implies. They are
meant as /inspiration/ concerning the arragnement of code as well as an
indication that the code may well be organized in packages or
subdirectories. It's /not/ meant as mandatory structure or as files which
need to be filled out. Indeed, once finished (with the first oblig or
both), it's strange to have a compiler that resides in a directory called
with the curious name ~oblig1-starting-point~. There are better choices
(like ~compila~ or ~parser~ (for the first oblig) or similar. Of course a
rearrangement would require adaptation of the build-file etc. Also, your
solution will have a Readme (maybe like this ~Readme.org~ which is a kind
of markdown solution), and again, /your/ readme reflect /your/ structure
(and carries the name of the author(s)), not necessarily the one from the
starting point. 


** Starting point for oblig 1

The starting point for oblig 1 is simply a subdirectory, namely
[[./oblig1-starting-point]]. To get hold of it, one typically just clones the
whole repository.

** Starting pount for oblig 2

The starting point for oblig 2 is also available as subdirectory, namely
[[./oblig2-patch]]. But perhaps the best way to get hold of it is not to clone
the whole thing again (or update the previously cloned one), as your own
directory structure may have evolved in the meantime, i.e., from the time
you cloned it at the beginning of oblig-1.  Since one cannot clone a
respository partially, and since you are probably interested only in the
``additional'' material for oblig 2, you might simply click on the zip-file
and download that one without cloning (or updating) the whole
compila-repository one more time. Anyway, you will need to ``incorporate''
the new subbidrectory and the new files into /your/ current state of
development. And again, it's meant as insporational starting point, i,e.,
by ``incorporating'' it's not meant that your solution should have a
subdectory ~oblig2-patch~ what needs to ``filled out'' and compiled
together with the rest of your solution. Anyway, 

- here is the zip file for patch for oblig2: [[./oblig2_patch.zip]]


it corresponds to the mentioned [[./oblig2-patch][subdirectory oblig2-patch]].



* Some relevant external links 


   - [[http://jflex.de][JFlex]] in particular the [[http://jflex.de/manual.html][user manual]]
   - [[http://www2.cs.tum.edu/projects/cup/][CUP]], also here the [[http://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html][manual]] from Princeton, 
   - [[http://ant.apache.org/][ant]]


In the cases of the tools, especially the input syntax (for the lexer and
for the parser) are relevant. Probably one learns a lot from examples, that
are provided with those tools. For ant, use the ~built.xml~ provided /here/
as starting point, it should give a good start.

