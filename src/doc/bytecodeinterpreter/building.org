#+LINK: srcbytecode ../../../material/oblig2-patch/src/bytecode/%s
#+LINK: srcruntime ../../../material/oblig2-patch/src/runtime/%s

* Building a complete program

We have shown the basics of how a bytecode program (binary file) is built
using the bytecode library. In this section we will show some of the
details by covering each of the classes in the library. Details about all
the instructions will come in Section [[sec:rememberthis]].

The main parts for creating a new program are: create an object of the
class ~CodeFile~. Afterwards add the procedures, i.e., objects of class
~CodeProcedure~, structs, i.e., objects of class ~CodeStruct~, and so
on. Finally, when calling the ~getBytecode()~ procedure, the bytecode
library will generae the actual bytes from the object hat have been created
and from the ``properties'' given to those objects.

Note that there a /four/ steps to create a procedure (or a struct, or
global variable).

1. /add/ the definition to the ~CodeFile~ object via ~addProcedure~.
2. /create/ the ~CodeProcedure~ object via ~new CodeProcedure~.
3. /add/ ``properties'', such as the instructions, to the ~CodeProcedure~
   object.
4. /update/ the ~CodeProcedure~ object in the ~CodeFile~ via
   ~updateProcedure~


These four standard steps are illustrated in slightly more detail in the
following example.k

** A small example

The example code creates a program and first adds the name of a library
procedure to be used.  It then adds a procedure ~Main~, a global variable
~myGlobalVar~, a procedure ~test~ and a struct ~Complex~ (I). The main
procedure has the void return type, no parameters, no local variables and
the body consists of a single instruction, namely ~return~ (II). The global
variable is typed with the struct type ~Complex~ (III). The procedure
~test~ has 2 parameters (of type float and a reference type to
~Complex~). The procedure loads the first parameter onto the stack and then
calls the (library) procedure ~print_float~ to print its value (IV). The
struct ~Complex~ is created and the two fields, both of floating point
type, are added to it (V). The procedure ~print_float~ used in the program
is a library procedure. Nonetheless, it needs to be added, but without
instructions (VI). See Section [[sec:typicaltasks]] Finally, the mandatory main
method is set, before the bytecode can be extracted to a file (VII),



#+include: "codesnippets/simpleexample.javaoid" src java




